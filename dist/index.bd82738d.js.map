{"mappings":"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","sources":["prison-riddle/src/Canvas.ts","prison-riddle/src/TouchSurface.ts","prison-riddle/src/App.ts","prison-riddle/src/index.js"],"sourcesContent":["class Canvas {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\")!;\n    this.canvas.width = this.canvasWidth();\n    this.canvas.height = this.canvasHeight();\n    // window resize listener to reset canvases\n    let isResizing = false;\n    let lastResizeTimeout; // closure to keep track of last timeout so it can be canceled\n    window.addEventListener(\"resize\", (e) => {\n      if (isResizing) {\n        clearTimeout(lastResizeTimeout);\n        lastResizeTimeout = setTimeout(() => {\n          isResizing = false;\n          this.resize(this.canvasWidth(), this.canvasHeight());\n        }, 100);\n      } else {\n        isResizing = true;\n      }\n    });\n  }\n\n  clear() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  canvasWidth() {\n    return window.innerWidth;\n  }\n  canvasHeight() {\n    return window.innerHeight;\n  }\n\n  resize(width: number, height: number) {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n  }\n}\n\nexport default Canvas;\n","class TouchSurface {\n  touchElement: HTMLElement;\n  constructor() {\n    this.touchElement = document.getElementById(\"touch-surface\")!;\n  }\n\n  onStart(handler: (e: Event) => void) {\n    for (const ev of [\"touchstart\", \"mousedown\"]) {\n      this.touchElement.addEventListener(ev, handler);\n    }\n  }\n\n  onMove(handler: (e: Event) => void) {\n    for (const ev of [\"touchmove\", \"mousemove\"]) {\n      this.touchElement.addEventListener(ev, handler);\n    }\n  }\n\n  onEnd(handler: (e: Event) => void) {\n    for (const ev of [\"touchend\", \"mouseup\"]) {\n      this.touchElement.addEventListener(ev, handler);\n    }\n  }\n  doOverlap(l1, r1, l2, r2) {\n    // To check if either rectangle is actually a line\n    // For example : l1 ={-1,0} r1={1,1} l2={0,-1} r2={0,1}\n\n    if (l1.x == r1.x || l1.y == r1.y || l2.x == r2.x || l2.y == r2.y) {\n      // the line cannot have positive overlap\n      return false;\n    }\n\n    // If one rectangle is on left side of other\n    if (l1.x >= r2.x || l2.x >= r1.x) {\n      // console.log(\"to left\")\n      return false;\n    }\n\n    // If one rectangle is above other\n    // signs flipped because coordinates are top down\n    if (r1.y <= l2.y + 10 || r2.y <= l1.y + 10) {\n      // console.log(\"above\")\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport default TouchSurface;\n","import Canvas from \"./Canvas\";\nimport TouchSurface from \"./TouchSurface\";\n\ninterface Body {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  draw: () => void;\n  update: () => void;\n}\n\nclass Box implements Body {\n  context: CanvasRenderingContext2D;\n  number: number;\n  contains: number;\n  w = 40;\n  h = 40;\n  x: number;\n  y: number;\n\n  draw() {\n    const { x, y, w, h } = this;\n    this.context.beginPath();\n    this.context.rect(x, y, w, h);\n    this.context.lineWidth = 10;\n    this.context.stroke();\n    this.context.fillStyle = \"tan\";\n    this.context.fill();\n    this.context.closePath();\n    this.context.font = \"26px serif\";\n    this.context.fillStyle = \"black\";\n    this.context.textAlign = \"center\";\n    this.context.textBaseline = \"middle\";\n    this.context.fillText(this.number.toString(), x + w / 2, y + h / 2);\n    this.context.font = \"20px sans-serif\";\n    this.context.fillStyle = \"hotpink\";\n    this.context.textAlign = \"center\";\n    this.context.textBaseline = \"middle\";\n    this.context.fillText(this.contains.toString(), x + w / 2, y - 15);\n  }\n\n  update() {}\n  constructor(\n    context: CanvasRenderingContext2D,\n    number: number,\n    contains: number,\n    x,\n    y\n  ) {\n    this.x = x;\n    this.y = y;\n    this.number = number;\n    this.contains = contains;\n    this.context = context;\n  }\n}\nclass Prisoner implements Body {\n  number: number;\n  w = 30;\n  h = 30;\n  x = 0;\n  y = 300;\n  state: string = \"searching\";\n  simulation: Simulation;\n  target: number | null;\n  randomNumbers: number[];\n  count: number = 0;\n\n  constructor(number: number, simulation: Simulation) {\n    this.simulation = simulation;\n    this.randomNumbers = simulation.shuffledNumbers();\n    this.target = simulation.mode === \"loop\" ? number : this.randomNumbers[0];\n    console.log(this.target);\n    this.number = number;\n  }\n\n  draw() {\n    let mainLayer: CanvasRenderingContext2D = this.simulation.layers[1].context;\n    let backLayer: CanvasRenderingContext2D = this.simulation.layers[0].context;\n    const { x, y, w, h } = this;\n    if (this.target !== this.number) {\n      backLayer.beginPath();\n      backLayer.arc(x, y, w / 3, 0, 2 * Math.PI);\n      backLayer.fillStyle = \"rgba(0,0,255,.01)\";\n      backLayer.fill();\n    }\n    backLayer.closePath();\n    mainLayer.beginPath();\n    mainLayer.arc(x, y, w / 2, 0, 2 * Math.PI);\n    mainLayer.lineWidth = 10;\n    mainLayer.stroke();\n    mainLayer.fillStyle =\n      this.state === \"searching\"\n        ? \"yellow\"\n        : this.state === \"success\"\n        ? \"limegreen\"\n        : \"red\";\n    mainLayer.fill();\n    mainLayer.closePath();\n    mainLayer.font = \"30px serif\";\n    mainLayer.fillStyle = \"black\";\n    mainLayer.textAlign = \"center\";\n    mainLayer.textBaseline = \"middle\";\n    mainLayer.fillText(this.number.toString(), x, y);\n  }\n\n  update() {\n    let step = this.simulation.step;\n    if (\n      (this.state === \"success\" || this.state === \"failed\") &&\n      this.target !== null\n    ) {\n      if (this.x < 1000 + (this.number % this.simulation.columns) * 40) {\n        this.x += step;\n      }\n      if (this.y < 100 + Math.floor(this.number / this.simulation.rows) * 40) {\n        this.y += step;\n      }\n      if (this.y > 100 + Math.floor(this.number / this.simulation.rows) * 40) {\n        this.y -= step;\n      }\n    }\n    if (this.state === \"searching\") {\n      if (this.target !== null) {\n        let targetBox = this.simulation.boxes[this.target];\n        if (targetBox.x === this.x && targetBox.y === this.y) {\n          this.count += 1;\n          if (targetBox.contains === this.number) {\n            this.state = \"success\";\n          }\n          if (\n            this.count >\n            (this.simulation.rows * this.simulation.columns) / 2\n          ) {\n            this.state = \"failed\";\n          }\n          this.randomNumbers.splice(this.randomNumbers.indexOf(this.target), 1);\n          if (this.simulation.mode === \"loop\") {\n            this.target = targetBox.contains;\n          } else {\n            this.target = this.randomNumbers[0];\n          }\n        }\n        if (targetBox.x > this.x) {\n          this.x += step;\n          return;\n        }\n        if (targetBox.x < this.x) {\n          this.x -= step;\n          return;\n        }\n        if (targetBox.y > this.y) {\n          this.y += step;\n          return;\n        }\n        if (targetBox.y < this.y) {\n          this.y -= step;\n          return;\n        }\n      }\n    }\n  }\n}\n\nclass App {\n  layers: Canvas[];\n  simulation: Simulation;\n  addPrisoner: HTMLButtonElement;\n  resetPrisoners: HTMLButtonElement;\n  newGame: HTMLButtonElement;\n  slowButton: HTMLButtonElement;\n  fastButton: HTMLButtonElement;\n  loopButton: HTMLButtonElement;\n  randomButton: HTMLButtonElement;\n  touchSurface: TouchSurface;\n  rows: number = 6;\n  columns: number = 6;\n\n  reset() {\n    this.simulation = new Simulation(\n      this.layers,\n      this.touchSurface,\n      this.rows,\n      this.columns\n    );\n    this.layers[0].clear();\n    this.resetButtons();\n  }\n\n  assignButton(id: string, field: string) {\n    this[field] = document.getElementById(id)! as HTMLButtonElement;\n  }\n\n  constructor() {\n    this.layers = [\n      new Canvas(document.getElementById(\"canvas-0\")! as HTMLCanvasElement),\n      new Canvas(document.getElementById(\"canvas-1\")! as HTMLCanvasElement),\n    ];\n    this.touchSurface = new TouchSurface();\n    this.assignButton(\"addPrisonerButton\", \"addPrisoner\");\n    this.assignButton(\"resetPrisonersButton\", \"resetPrisoners\");\n    this.assignButton(\"newGameButton\", \"newGame\");\n    this.assignButton(\"slowButton\", \"slowButton\");\n    this.assignButton(\"fastButton\", \"fastButton\");\n    this.assignButton(\"loopButton\", \"loopButton\");\n    this.assignButton(\"randomButton\", \"randomButton\");\n\n    this.reset();\n\n    this.loopButton.addEventListener(\"click\", () => {\n      this.simulation.mode = \"loop\";\n      this.resetButtons();\n    });\n\n    this.randomButton.addEventListener(\"click\", () => {\n      this.simulation.mode = \"random\";\n      this.resetButtons();\n    });\n\n    this.slowButton.addEventListener(\"click\", () => {\n      this.simulation.speed = 20;\n      this.resetButtons();\n    });\n    this.fastButton.addEventListener(\"click\", () => {\n      this.simulation.speed = 5;\n      this.resetButtons();\n    });\n\n    this.resetPrisoners.addEventListener(\"click\", () => {\n      this.layers[0].clear();\n      this.simulation.prisoners = [];\n      this.addPrisoner.innerText = `Add Prisoner (${this.simulation.prisoners.length}/${this.simulation.boxes.length})`;\n    });\n    this.addPrisoner.addEventListener(\"click\", () => {\n      this.simulation.addPrisoner();\n      this.addPrisoner.innerText = `Add Prisoner (${this.simulation.prisoners.length}/${this.simulation.boxes.length})`;\n    });\n    this.newGame.addEventListener(\"click\", () => {\n      this.simulation.shuttingDown = true;\n      this.reset();\n    });\n  }\n\n  resetButtons() {\n    this.addPrisoner.innerText = `Add Prisoner (${this.simulation.prisoners.length}/${this.simulation.boxes.length})`;\n    if (this.simulation.mode === \"loop\") {\n      this.loopButton.className = \"active\";\n      this.randomButton.className = \"inactive\";\n    } else {\n      this.loopButton.className = \"inactive\";\n      this.randomButton.className = \"active\";\n    }\n    if (this.simulation.speed === 5) {\n      this.slowButton.className = \"inactive\";\n      this.fastButton.className = \"active\";\n    } else {\n      this.slowButton.className = \"active\";\n      this.fastButton.className = \"inactive\";\n    }\n  }\n}\nclass Simulation {\n  layers: Canvas[];\n  prisoners: Prisoner[] = [];\n  boxes: Box[];\n  rows: number;\n  columns: number;\n  speed: number = 5;\n  shuttingDown: boolean = false;\n  touchSurface: TouchSurface;\n  selected: number = -1;\n  selectedOffset: { x: number; y: number } = { x: 0, y: 0 };\n  step: number = 4;\n  mode: string = \"loop\";\n\n  constructor(\n    layers: Canvas[],\n    touchSurface: TouchSurface,\n    rows: number,\n    columns: number\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.layers = layers;\n    this.touchSurface = touchSurface;\n    const templateArray = Array.from(Array(this.rows * this.columns)).map(\n      (item, index) => index\n    );\n    const shuffled: number[] = shuffleArray([...templateArray]);\n    this.boxes = templateArray.map((item, index) => {\n      let x = index % this.columns;\n      let y = Math.floor(index / this.rows);\n      return new Box(\n        this.layers[1].context,\n        index,\n        shuffled[index],\n        500 + x * 80,\n        140 + y * 80\n      );\n    });\n    touchSurface.onStart((event: Event) => {\n      let x, y;\n      x = (<MouseEvent>event).pageX;\n      y = (<MouseEvent>event).pageY;\n      this.selected = this.boxes.findIndex((box) => {\n        return x > box.x && x < box.x + box.w && y > box.y && y < box.y + box.h;\n      });\n      let box = this.boxes[this.selected];\n      if (this.selected !== -1) {\n        this.selectedOffset = { x: x - box.x, y: y - box.y };\n      }\n    });\n    touchSurface.onEnd((event: Event) => {\n      this.selected = -1;\n    });\n    touchSurface.onMove((event: Event) => {\n      if (this.selected !== -1) {\n        let x, y;\n        x = (<MouseEvent>event).pageX - this.selectedOffset.x;\n        y = (<MouseEvent>event).pageY - this.selectedOffset.y;\n        this.boxes[this.selected].x = Math.ceil(x / this.step) * 4;\n        this.boxes[this.selected].y = Math.ceil(y / this.step) * 4;\n      }\n    });\n    this.main();\n  }\n\n  shuffledNumbers() {\n    const templateArray = Array.from(Array(this.rows * this.columns)).map(\n      (item, index) => index\n    );\n    const shuffled: number[] = shuffleArray([...templateArray]);\n    return shuffled;\n  }\n\n  addPrisoner() {\n    if (this.prisoners.length < this.boxes.length) {\n      this.prisoners.push(new Prisoner(this.prisoners.length, this));\n    }\n  }\n\n  main() {\n    this.tick();\n  }\n\n  tick() {\n    if (this.shuttingDown) {\n      return;\n    } else {\n      let bodies = [...this.boxes, ...this.prisoners];\n      bodies.forEach((body) => {\n        body.update();\n      });\n      this.layers[1].clear();\n      bodies.forEach((body) => {\n        body.draw();\n      });\n      setTimeout(() => {\n        this.tick();\n      }, this.speed);\n    }\n  }\n}\n\nfunction shuffleArray(array: number[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default App;\n","\nimport App from \"./App\"\n\nnew App()\n"],"names":["$8386a39af63f2c5c$export$2e2bcd8739ae039","canvas","this","context","getContext","width","canvasWidth","height","canvasHeight","lastResizeTimeout","isResizing","window","addEventListener","e","clearTimeout","setTimeout","resize","clear","clearRect","innerWidth","innerHeight","$43fb2765157a0cf1$export$2e2bcd8739ae039","touchElement","document","getElementById","onStart","handler","ev","onMove","onEnd","doOverlap","l1","r1","l2","r2","x","y","$7b1767b8bc55b30c$var$Box","draw","w","h","beginPath","rect","lineWidth","stroke","fillStyle","fill","closePath","font","textAlign","textBaseline","fillText","number","toString","contains","update","$7b1767b8bc55b30c$var$Prisoner","simulation","state","count","randomNumbers","shuffledNumbers","target","mode","console","log","mainLayer","layers","backLayer","arc","Math","PI","step","columns","floor","rows","targetBox","boxes","splice","indexOf","$7b1767b8bc55b30c$var$Simulation","touchSurface","prisoners","speed","shuttingDown","selected","selectedOffset","templateArray","Array","from","map","item","index","shuffled","$7b1767b8bc55b30c$var$shuffleArray","event","pageX","pageY","findIndex","box","box1","ceil","main","addPrisoner","length","push","tick","bodies","forEach","body","array","i","j","random","reset","resetButtons","assignButton","id","field","loopButton","randomButton","slowButton","fastButton","resetPrisoners","innerText","newGame","className"],"version":3,"file":"index.bd82738d.js.map"}